import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

def sys(t, Y):
    x, v = Y
    return [v, -x]

t0, t_end = map(float, input("Enter start and end time: ").split())
x0, v0 = map(float, input("Enter initial conditions for x and v: ").split())
N = int(input("Enter the number of time evaluation points: "))

t_eval = np.linspace(t0, t_end, N)
sol = solve_ivp(sys, (t0, t_end), [x0, v0], t_eval=t_eval)

plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(sol.t, sol.y[0], label='x(t)')
plt.plot(sol.t, sol.y[1], label='v(t)')
plt.xlabel("Time")
plt.ylabel("State")
plt.title("Time-Domain Plot")
plt.legend()

plt.subplot(1,2,2)
plt.plot(sol.y[0], sol.y[1])
plt.xlabel("x")
plt.ylabel("v")
plt.title("Phase Plot")

plt.tight_layout()
plt.show()
