import numpy as np

def gauss_jordan_inverse(matrix):
    n = len(matrix)
    augmented = np.hstack((matrix, np.identity(n))) 
    
    for i in range(n):
        if augmented[i, i] == 0: 
            for j in range(i + 1, n):
                if augmented[j, i] != 0:
                    augmented[[i, j]] = augmented[[j, i]] 
                    break
            else:
                raise ValueError("Matrix is singular and cannot be inverted.")
        
        augmented[i] = augmented[i] / augmented[i, i]  
        
        for j in range(n):
            if i != j:
                augmented[j] -= augmented[i] * augmented[j, i] 
    
    return augmented[:, n:]  

# Example usage
A = np.array([[2, 1], [5, 3]], dtype=float)
A_inv = gauss_jordan_inverse(A)
print("Inverse Matrix:")
print(A_inv)
