def gauss_jordan_inverse(matrix):
    n = len(matrix)
    augmented = [row + [1 if i == j else 0 for j in range(n)] for i, row in enumerate(matrix)]  # Augment with I matrix
    
    for i in range(n):
        if augmented[i][i] == 0:  #pivot is nonzero
            for j in range(i + 1, n):
                if augmented[j][i] != 0:
                    augmented[i], augmented[j] = augmented[j], augmented[i]  # Swap rows
                    break
            else:
                raise ValueError("Matrix is singular and cannot be inverted.")
        
        pivot = augmented[i][i]
        augmented[i] = [x / pivot for x in augmented[i]]  # Make pivot 1
        
        for j in range(n):
            if i != j:
                factor = augmented[j][i]
                augmented[j] = [aj - factor * ai for aj, ai in zip(augmented[j], augmented[i])]  # Make column elements 0
    
    return [row[n:] for row in augmented]  # Extract inverse matrix

# Example usage
A = [[2, 1], [5, 3]]
A_inv = gauss_jordan_inverse(A)
print("Inverse Matrix:")
for row in A_inv:
    print(row)
