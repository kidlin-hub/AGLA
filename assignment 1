def solve_linear_system(mat, vec):
    size = len(vec)
    aug = [row + [vec[i]] for i, row in enumerate(mat)]
    
    for i in range(size):
        # Pivoting
        max_idx = max(range(i, size), key=lambda r: abs(aug[r][i]))
        if i != max_idx:
            aug[i], aug[max_idx] = aug[max_idx], aug[i]
        
        pivot = aug[i][i]
        if pivot == 0:
            raise ValueError("Singular matrix detected.")
        
        # Normalize
        for j in range(i, size + 1):
            aug[i][j] /= pivot
        
        # Eliminate
        for k in range(i + 1, size):
            factor = aug[k][i]
            for j in range(i, size + 1):
                aug[k][j] -= factor * aug[i][j]
    
    # Back-substitution
    solution = [0] * size
    for i in range(size - 1, -1, -1):
        solution[i] = aug[i][size] - sum(aug[i][j] * solution[j] for j in range(i + 1, size))
    
    return solution

# Example usage
mat = [[2, 1], [1, 1]]
vec = [4, 2]
sol = solve_linear_system(mat, vec)
print("Solution:", sol)
